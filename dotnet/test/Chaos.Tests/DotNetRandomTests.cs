using System;
using Xunit;

namespace NerdyMishka.Chaos.Tests
{
    public class DotNetRandomTests
    {
        [Fact]
        public void SeededAndAutogeneratedRandomProduceDifferentValues()
        {
            var r1 = new DotNetRandom();
            var r2 = new DotNetRandom(1);

            Assert.NotEqual(r1.NextInt32(), r2.NextInt32());
            Assert.NotEqual(r1.NextInt64(), r2.NextInt64());
            Assert.NotEqual(r1.NextFloat(), r2.NextFloat());
            Assert.NotEqual(r1.NextDouble(), r2.NextDouble());
        }

        [Fact]
        public void SeededRngProduceSameValues()
        {
            var r1 = new DotNetRandom(1);
            var r2 = new DotNetRandom(1);

            Assert.Equal(r1.NextInt32(), r2.NextInt32());
            Assert.Equal(r1.NextInt64(), r2.NextInt64());
            Assert.Equal(r1.NextFloat(), r2.NextFloat());
            Assert.Equal(r1.NextDouble(), r2.NextDouble());
            Assert.Equal(r1.NextBoolean(), r2.NextBoolean());
        }

        [Fact]
        public void Int32_Min_Max()
        {
            var r1 = new DotNetRandom(1);

            for(var i =0; i < 1000; i++)
            {
                var actual = r1.NextInt32(2000);
                Assert.True(actual >= 0 && actual <= 2000);
            }

            for(var i =0; i < 1000; i++)
            {
                var actual = r1.NextInt32(100, 2000);
                Assert.True(actual >= 100 && actual <= 2000);
            }
        }

        [Fact]
        public void Int64_Min_Max()
        {
            var r1 = new DotNetRandom();
            long min = Int32.MaxValue;
            long max = ((long)Int32.MaxValue) + 2000;
            for(var i =0; i < 1000; i++)
            {
                var actual = r1.NextInt64(max);
                Assert.True(actual >= 0 && actual <= max);
            }

            for(var i =0; i < 1000; i++)
            {
                var actual = r1.NextInt64(min, max);
                Assert.True(actual >= min && actual <= max, $"{actual} is either lower than {min} or greather than {max}");
            }

            for(var i =0; i < 1000; i++)
            {
                var actual = r1.NextInt64(-max, -min);
                Assert.True(actual >= (-max) && actual <= (-min), $"{actual} is either lower than -{max} or greather than -{min}");
            }
        }

   
    }
}
